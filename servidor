#!/usr/bin/env python3
import asyncio
import re
from tcp import Servidor, Conexao

apelidos: dict[bytes, Conexao] = {}
canais: dict[str, list[Conexao]] = {}

class Utils:
    def validar_nome(nome: bytes) -> bool:
        return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

    def parse_cmd(linha: bytes):
        # separa o comando dos argumentos
        _, *rest = linha.split(b' ', 1)
        return rest[0] if rest else b''

class Handler:
    def handle_ping(conexao: Conexao, linha: bytes):
        args = Utils.parse_cmd(linha)
        args = args.lstrip(b':')

        resposta = b':server PONG server :' + args + b'\r\n'
        conexao.enviar(resposta)

    def handle_nick(conexao, linha: bytes):
        token = Utils.parse_cmd(linha)
        token = token.lstrip(b':')

        if not Utils.validar_nome(token):
            resposta = b':server 432 ' + (conexao.apelido if conexao.apelido != b'' else b'*') + b' ' + token + b' :Erroneous nickname' + b'\r\n'
            conexao.enviar(resposta)
        elif token.upper() in apelidos:
            resposta = b':server 433 ' + (conexao.apelido if conexao.apelido != b'' else b'*') + b' ' + token + b' :Nickname is already in use' + b'\r\n'
            conexao.enviar(resposta)
        else:
            apelidos[token.upper()] = conexao
            if conexao.apelido == b'':
                resposta = (
                    b':server 001 ' + token + b' :Welcome' + b'\r\n' +
                    b':server 422 ' + token + b' :MOTD File is missing' + b'\r\n'
                )
                conexao.enviar(resposta)
            else:
                del apelidos[conexao.apelido.upper()]
                resposta = b':' + conexao.apelido + b' NICK ' + token + b'\r\n'
                conexao.enviar(resposta)
            conexao.apelido = token

    def handle_join(conexao: Conexao, linha: bytes):
        # linha: b'JOIN #canal'
        chan = Utils.parse_cmd(linha)
        name = chan.lstrip(b'#')
        if not Utils.validar_nome(name):
            conexao.enviar(b':server 403 ' + chan + b' :No such channel\r\n')
            return

        key = chan.upper()
        canais.setdefault(key, []).append(conexao)

        for c in canais[key]:
            c.enviar(b':' + conexao.apelido + b' JOIN :' + chan + b'\r\n')

        nicks = sorted(
            [c.apelido or b'*' for c in canais[key]],
            key=lambda x: (x == b'*', x.lower())
        )
        prefix = b':server 353 ' + conexao.apelido + b' = ' + chan + b' :'
        linha_nicks = prefix + b' '.join(nicks)
        conexao.enviar(linha_nicks + b'\r\n')
        conexao.enviar(
            b':server 366 ' + conexao.apelido + b' ' + chan +
            b' :End of /NAMES list.\r\n'
        )

    def handle_privmsg(conexao: Conexao, linha: bytes):
        # linha: b'PRIVMSG <dest> :<msg>'
        args = Utils.parse_cmd(linha)
        dest, msg = args.split(b' ', 1)
        msg = msg.lstrip(b':')

        full = (
            b':' + conexao.apelido +
            b' PRIVMSG ' + dest + b' :' + msg + b'\r\n'
        )

        if dest.startswith(b'#'):
            # msg no canal
            key = dest.upper()
            if key in canais:
                for c in canais[key]:
                    if c is not conexao:
                        c.enviar(full)
        else:
            # msg privada
            key = dest.upper()              
            if key in apelidos:
                apelidos[key].enviar(full)


    def handle_part(conexao: Conexao, linha: bytes):
        raw = Utils.parse_cmd(linha) 
        chan = raw.split(b' ', 1)[0]    
        key  = chan.upper() 

        if key not in canais or conexao not in canais[key]:
            return

        msg = b':' + conexao.apelido + b' PART ' + chan + b'\r\n'

        members = list(canais[key])
        for c in members:
            c.enviar(msg)

        canais[key].remove(conexao)

    def handle_default(conexao, linha: bytes):
        print(conexao, linha)

class IRCServer:
    def __init__(self, porta: int = 6667):
        self.servidor = Servidor(porta)

    def start(self):
        self.servidor.registrar_monitor_de_conexoes_aceitas(
            self.conexao_aceita)
        print(
            f"[Servidor] Escutando em 0.0.0.0:{self.servidor.s.getsockname()[1]}")
        asyncio.get_event_loop().run_forever()

    def conexao_aceita(self, conexao: Conexao):
        print(f"[Conexão] {conexao} conectou")
        conexao.registrar_recebedor(self.dados_recebidos)

    def dados_recebidos(self, conexao: Conexao, dados: bytes):
        if dados == b'':
            return self.sair(conexao)

        conexao.buffer += dados
        linhas = conexao.buffer.split(b'\r\n')
        conexao.buffer = linhas[-1]

        for linha in linhas[:-1]:
            if not linha:
                continue
            if linha.upper().startswith(b'PING'):
                Handler.handle_ping(conexao, linha)
            elif linha.upper().startswith(b'NICK'):
                Handler.handle_nick(conexao, linha)
            elif linha.upper().startswith(b'PRIVMSG'):
                Handler.handle_privmsg(conexao, linha)
            elif linha.upper().startswith(b'JOIN'):
                Handler.handle_join(conexao, linha)
            elif linha.upper().startswith(b'PART'):
                Handler.handle_part(conexao, linha)
            else:
                Handler.handle_default(conexao, linha)

    def sair(self, conexao: Conexao):
        print(f"[Desconexão] {conexao} fechou")
        nick = conexao.apelido or b'*'
        key_nick = nick.upper()

        if key_nick in apelidos:
            del apelidos[key_nick]

        destinatarios = set()
        for members in canais.values():
            if conexao in members:
                for c in members:
                    if c is not conexao:
                        destinatarios.add(c)
                members.remove(conexao)

        quit_msg = b':' + nick + b' QUIT :Client Quit\r\n'
        for c in destinatarios:
            c.enviar(quit_msg)

        conexao.fechar()


if __name__ == "__main__":
    IRCServer(porta=6667).start()
